{"mappings":"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","sources":["src/app.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n// import Stats from 'three/examples/jsm/libs/stats.module.js';\n\nconst aFifteenDegreePerHourDrift = 0.0015;\nconst lat = (51.5 * Math.PI) / 180;\nconst lon = (0 * Math.PI) / 180;\n\nconst fov = 60;\nconst near = 0.1;\nconst far = 1000;\nconst scene = new THREE.Scene();\n\nfunction aspect() {\n  return window.innerWidth / window.innerHeight;\n}\n\nconst canvas = document.querySelector('#canvas');\nlet renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n  antialias: true,\n});\nrenderer.setSize(window.innerWidth / 2, window.innerHeight);\nrenderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);\nrenderer.autoClear = false;\nrenderer.setClearColor(0x000000, 0);\n\nlet camera = new THREE.PerspectiveCamera(fov, aspect() / 2, near, far);\ncamera.position.z = 6;\nscene.add(camera);\n\nconst earthGeometry = new THREE.SphereGeometry(0.6, 32, 32, -Math.PI / 2);\nconst earthMaterial = new THREE.MeshPhongMaterial({\n  map: THREE.ImageUtils.loadTexture('textures/earthmap1k.jpg'),\n  bumpMap: THREE.ImageUtils.loadTexture('textures/earthbump.jpg'),\n  bumpScale: 0.01,\n});\nconst earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);\nscene.add(earthMesh);\n\nconst cloudGeometry = new THREE.SphereGeometry(0.63, 32, 32);\nconst cloudMetarial = new THREE.MeshPhongMaterial({\n  map: THREE.ImageUtils.loadTexture('textures/earthCloud.png'),\n  transparent: true,\n});\nconst cloudMesh = new THREE.Mesh(cloudGeometry, cloudMetarial);\nscene.add(cloudMesh);\n\nconst rodGeometry = new THREE.CylinderGeometry(0.01, 0.01, 6, 32);\nconst rodMaterial = new THREE.MeshPhongMaterial({\n  color: 0xffff00,\n  emissive: 0xffff00,\n  shininess: 1,\n});\nconst rodMesh = new THREE.Mesh(rodGeometry, rodMaterial);\nrodMesh.position.z = 0.67 * Math.cos(lat) * Math.cos(lon);\nrodMesh.position.x = 0.67 * Math.cos(lat) * Math.sin(lon);\nrodMesh.position.y = 0;\nscene.add(rodMesh);\n\nconst starGeometry = new THREE.SphereGeometry(80, 64, 64);\nconst starMaterial = new THREE.MeshBasicMaterial({\n  map: THREE.ImageUtils.loadTexture('textures/TychoSkymapII.t3_04096x02048.jpg'),\n  side: THREE.BackSide,\n});\nconst starMesh = new THREE.Mesh(starGeometry, starMaterial);\nscene.add(starMesh);\n\nconst ambientlight = new THREE.AmbientLight(0xffffff, 0.35);\nscene.add(ambientlight);\n\nconst pointLight = new THREE.PointLight(0xffffff, 1.2);\npointLight.position.set(6, 1, 7);\nscene.add(pointLight);\n\n////////////////////////////////////////\n\nlet cameraN = new THREE.PerspectiveCamera(fov, aspect(), near, far);\nlet cameraS = new THREE.PerspectiveCamera(fov, aspect(), near, far);\n\ncameraN.position.z = 0.6 * Math.cos(lat) * Math.cos(lon);\ncameraN.position.x = 0.6 * Math.cos(lat) * Math.sin(lon);\ncameraN.position.y = 0.6 * Math.sin(lat);\ncameraN.lookAt(0, 80, 0);\n\ncameraS.position.z = 0.6 * Math.cos(-lat) * Math.cos(lon);\ncameraS.position.x = 0.6 * Math.cos(-lat) * Math.sin(lon);\ncameraS.position.y = 0.6 * Math.sin(-lat);\ncameraS.lookAt(0, -80, 0);\n\nscene.add(cameraN);\nscene.add(cameraS);\n\nvar textureFront = THREE.ImageUtils.loadTexture('textures/clock_face.png');\nvar textureBack = THREE.ImageUtils.loadTexture('textures/clock_gears.png');\nvar material1 = new THREE.MeshPhongMaterial({ color: 0xffffff, map: textureFront, transparent: true });\nvar material2 = new THREE.MeshPhongMaterial({ color: 0xffffff, map: textureBack, transparent: true });\nconst geometry1 = new THREE.PlaneGeometry(1, 1);\nconst geometry2 = new THREE.PlaneGeometry(1, 1);\ngeometry2.applyMatrix4(new THREE.Matrix4().makeRotationY(Math.PI));\nconst mesh1N = new THREE.Mesh(geometry1, material1);\nconst mesh2N = new THREE.Mesh(geometry2, material2);\nconst clockMeshN = new THREE.Object3D();\nclockMeshN.add(mesh1N);\nclockMeshN.add(mesh2N);\nclockMeshN.rotation.x = (90 * Math.PI) / 180;\nclockMeshN.rotation.y = (0 * Math.PI) / 180;\nclockMeshN.rotation.z = (180 * Math.PI) / 180;\nclockMeshN.position.y = 3;\nscene.add(clockMeshN);\n\nconst mesh1S = new THREE.Mesh(geometry1, material1);\nconst mesh2S = new THREE.Mesh(geometry2, material2);\nconst clockMeshS = new THREE.Object3D();\nclockMeshS.add(mesh1S);\nclockMeshS.add(mesh2S);\nclockMeshS.rotation.x = (-90 * Math.PI) / 180;\nclockMeshS.rotation.y = (0 * Math.PI) / 180;\nclockMeshS.rotation.z = (0 * Math.PI) / 180;\nclockMeshS.position.y = -3;\nscene.add(clockMeshS);\n\n////////////////////////////////////\n\nconst controls = new OrbitControls(camera, renderer.domElement);\n// const stats = new Stats();\n// document.querySelector('body').appendChild(stats.dom);\n\nconst render = () => {\n  const w = window.innerWidth;\n  const h = window.innerHeight;\n\n  renderer.setSize(w, h);\n\n  let left = Math.floor(w * 0);\n  let bottom = Math.floor(h * 0);\n  let width = Math.floor(w * 0.5);\n  let height = Math.floor(h * 1);\n\n  renderer.setViewport(left, bottom, width, height);\n  renderer.setScissor(left, bottom, width, height);\n  renderer.setScissorTest(true);\n\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n\n  renderer.render(scene, camera);\n\n  left = Math.floor(w * 0.5);\n  bottom = Math.floor(h * 0.5);\n  width = Math.floor(w * 0.5);\n  height = Math.floor(h * 0.5);\n\n  renderer.setViewport(left, bottom, width, height);\n  renderer.setScissor(left, bottom, width, height);\n  renderer.setScissorTest(true);\n\n  cameraN.aspect = width / height;\n  cameraN.updateProjectionMatrix();\n\n  renderer.render(scene, cameraN);\n\n  left = Math.floor(w * 0.5);\n  bottom = Math.floor(h * 0);\n  width = Math.floor(w * 0.5);\n  height = Math.floor(h * 0.5);\n\n  renderer.setViewport(left, bottom, width, height);\n  renderer.setScissor(left, bottom, width, height);\n  renderer.setScissorTest(true);\n\n  cameraS.aspect = width / height;\n  cameraS.updateProjectionMatrix();\n\n  renderer.render(scene, cameraS);\n};\n\nfunction rotateCam() {\n  let x = cameraN.position.x;\n  let y = cameraN.position.y;\n  let z = cameraN.position.z;\n  cameraN.position.x = x * Math.cos(aFifteenDegreePerHourDrift) + z * Math.sin(aFifteenDegreePerHourDrift);\n  cameraN.position.z = z * Math.cos(aFifteenDegreePerHourDrift) - x * Math.sin(aFifteenDegreePerHourDrift);\n  cameraN.lookAt(0, 2, 0);\n\n  cameraS.position.x = cameraN.position.x;\n  cameraS.position.z = cameraN.position.z;\n  cameraS.lookAt(0, -2, 0);\n\n  x = rodMesh.position.x;\n  y = rodMesh.position.y;\n  z = rodMesh.position.z;\n  rodMesh.position.x = x * Math.cos(aFifteenDegreePerHourDrift) + z * Math.sin(aFifteenDegreePerHourDrift);\n  rodMesh.position.z = z * Math.cos(aFifteenDegreePerHourDrift) - x * Math.sin(aFifteenDegreePerHourDrift);\n}\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  earthMesh.rotation.y += aFifteenDegreePerHourDrift;\n  cloudMesh.rotation.y += aFifteenDegreePerHourDrift * 0.84;\n\n  rotateCam();\n  controls.update();\n  // stats.update();\n\n  render();\n};\nanimate();\n"],"names":["$c8eaf4acd6fbca2f$var$lat","Math","PI","$c8eaf4acd6fbca2f$var$lon","$c8eaf4acd6fbca2f$var$scene","$hGT0Q","Scene","$c8eaf4acd6fbca2f$var$aspect","window","innerWidth","innerHeight","$c8eaf4acd6fbca2f$var$canvas","document","querySelector","$c8eaf4acd6fbca2f$var$renderer","WebGLRenderer","canvas","antialias","setSize","setPixelRatio","devicePixelRatio","autoClear","setClearColor","$c8eaf4acd6fbca2f$var$camera","PerspectiveCamera","position","z","add","$c8eaf4acd6fbca2f$var$earthGeometry","SphereGeometry","$c8eaf4acd6fbca2f$var$earthMaterial","MeshPhongMaterial","map","ImageUtils","loadTexture","bumpMap","bumpScale","$c8eaf4acd6fbca2f$var$earthMesh","Mesh","$c8eaf4acd6fbca2f$var$cloudGeometry","$c8eaf4acd6fbca2f$var$cloudMetarial","transparent","$c8eaf4acd6fbca2f$var$cloudMesh","$c8eaf4acd6fbca2f$var$rodGeometry","CylinderGeometry","$c8eaf4acd6fbca2f$var$rodMaterial","color","emissive","shininess","$c8eaf4acd6fbca2f$var$rodMesh","cos","x","sin","y","$c8eaf4acd6fbca2f$var$starGeometry","$c8eaf4acd6fbca2f$var$starMaterial","MeshBasicMaterial","side","BackSide","$c8eaf4acd6fbca2f$var$starMesh","$c8eaf4acd6fbca2f$var$ambientlight","AmbientLight","$c8eaf4acd6fbca2f$var$pointLight","PointLight","set","$c8eaf4acd6fbca2f$var$cameraN","$c8eaf4acd6fbca2f$var$cameraS","lookAt","$c8eaf4acd6fbca2f$var$textureFront","$c8eaf4acd6fbca2f$var$textureBack","$c8eaf4acd6fbca2f$var$material1","$c8eaf4acd6fbca2f$var$material2","$c8eaf4acd6fbca2f$var$geometry1","PlaneGeometry","$c8eaf4acd6fbca2f$var$geometry2","applyMatrix4","Matrix4","makeRotationY","$c8eaf4acd6fbca2f$var$mesh1N","$c8eaf4acd6fbca2f$var$mesh2N","$c8eaf4acd6fbca2f$var$clockMeshN","Object3D","rotation","$c8eaf4acd6fbca2f$var$mesh1S","$c8eaf4acd6fbca2f$var$mesh2S","$c8eaf4acd6fbca2f$var$clockMeshS","$c8eaf4acd6fbca2f$var$controls","$W2bOH","OrbitControls","domElement","$c8eaf4acd6fbca2f$var$animate","requestAnimationFrame","$c8eaf4acd6fbca2f$var$aFifteenDegreePerHourDrift","$c8eaf4acd6fbca2f$var$rotateCam","update","w","h","left","floor","bottom","width","height","setViewport","setScissor","setScissorTest","aspect","updateProjectionMatrix","render","$c8eaf4acd6fbca2f$var$render"],"version":3,"file":"index.08d23c74.js.map"}