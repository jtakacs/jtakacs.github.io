{"mappings":"kgBAGA,IAGIA,EAAiB,IACjBC,EAAO,EACPC,EAAO,EACPC,GAAe,EAEnB,MAAMC,EAAQ,IAAIC,EAAAC,MAKZC,EAAS,IAAIF,EAAAG,cAEbC,EAASC,SAASC,cAAc,WACtC,IAAIC,EAAW,IAAIP,EAAAQ,cAAoB,CACrCC,OAAQL,EACRM,WAAW,IAEbH,EAASI,QAAQC,OAAOC,WAAYD,OAAOE,aAC3CP,EAASQ,cAAcH,OAAOI,iBAAmBJ,OAAOI,iBAAmB,GAC3ET,EAASU,WAAY,EACrBV,EAASW,cAAc,EAAU,GAEjC,MAAMC,EAAe,IAAInB,EAAAoB,eAAqB,GAAI,GAAI,IAChDC,EAAe,IAAIrB,EAAAsB,kBAAwB,CAC/CC,IAAKrB,EAAOsB,KAAK,6CACjBC,KAAMzB,EAAA0B,WAEFC,EAAW,IAAI3B,EAAA4B,KAAWT,EAAcE,GAC9CtB,EAAM8B,IAAIF,GAEV,IAAIG,EAAU,GACd,MAAMC,EAAe,IAAI/B,EAAAgC,aAAmB,SAAUF,GACtD/B,EAAM8B,IAAIE,GAIV,MAAME,EAAW,IAAIjC,EAAAkC,aADZC,EADA,GAEuC,IAC1CC,EAAY,CAChB,IAAIpC,EAAAsB,kBAAwB,CAAEC,IAAKrB,EAAOsB,KAAK,wBAC/C,IAAIxB,EAAAsB,kBAAwB,CAAEe,MAAO,IACrC,IAAIrC,EAAAsC,kBAAwB,CAAEf,IAAKrB,EAAOsB,KAAK,uDAE3Ce,EAAO,IAAIvC,EAAA4B,KAAWK,EAAUG,GACtCG,EAAKC,SAASC,EAAIC,KAAKC,GACvBJ,EAAKK,SAASC,GAAIC,EAClB/C,EAAM8B,IAAIU,GAEV,MAAMQ,EAAgB,IAAI/C,EAAAkC,aAAmB,IAlD7B,KAkD8C,IAlD9C,KAkD+D,GAAI,GAAG,GAChFc,EAAgB,IAAIhD,EAAAsB,kBAAwB,CAAEC,IAAKrB,EAAOsB,KAAK,wBAC/DyB,EAAQ,IAAIjD,EAAA4B,KAAWmB,EAAeC,GAC5CC,EAAML,SAASC,EAAC,SAChBI,EAAMT,SAASK,EAAIH,KAAKC,GACxB5C,EAAM8B,IAAIoB,GAEV,MAAMC,GAAY,IAAIlD,EAAAG,eAAsBqB,KAAK,oBAC3C2B,EAAiB,IAAInD,EAAAoD,eAAqB,CAAE7B,IAAK2B,IACjDG,EAAS,IAAIrD,EAAAsD,OAAaH,GAChCE,EAAOT,SAASC,EA1DE,SAFF,KA8DhBQ,EAAOE,MAAMC,IADJ,QAAA,QAAA,SAETzD,EAAM8B,IAAIwB,GAEV,IAAII,GAAY,EACZC,EAAO,KACX,MAAMC,EAAe,IAAI3D,EAAA4D,kBAAwB,CAAEvB,MAAO,MAEpDwB,EAAY,IAAI7D,EAAA8D,UAAgB,SAAU,EAAG,EAAG,GAAK,GACrDC,EAAS,IAAI/D,EAAAgE,SACnBH,EAAUjB,SAASY,IAAI,EAAGH,EAAOT,SAASC,EAAG,GAC7CgB,EAAUI,YAAa,EACvBlE,EAAM8B,IAAIkC,GACVF,EAAUK,OAASH,EACnBhE,EAAM8B,IAAIgC,GAEV,MAAMM,EAAS,IAAInE,EAAAoE,kBAAwB,GAAI,EA7E/B,KA6E6C,KAC7DD,EAAOvB,SAASyB,EAAIlC,EACpBgC,EAAOvB,SAASC,EAAI,GACpBsB,EAAOG,OAAO,EA9EI,SAFF,KAgF6B,EAAG,GAChDvE,EAAM8B,IAAIsC,GAEV,MAAMI,EAAW,IAAIC,EAAAC,cAAcN,EAAQ5D,EAASmE,YAapDrE,SAASsE,iBAAiB,WAAW,SAAUC,GAuB7C,GAtBc,QAAVA,EAAEC,OACJ/C,EAAUY,KAAKoC,IAAI,EAAGhD,EAAU,KAChCC,EAAagD,UAAYjD,GAEb,QAAV8C,EAAEC,OACJ/C,EAAUY,KAAKsC,IAAI,EAAGlD,EAAU,KAChCC,EAAagD,UAAYjD,GAEb,SAAV8C,EAAEC,OACJV,EAAOvB,SAASY,IAAI,EAAG,GAAkBrB,GACzCgC,EAAOG,OAAO,EAzGA,SAFF,KA2GiC,EAAG,GAChDC,EAASU,SAEG,QAAVL,EAAEC,OACJlF,EAAiB+C,KAAKoC,IAAI,IAAKnF,EAAiB,MAEpC,QAAViF,EAAEC,OACJlF,EAAiB+C,KAAKsC,IAjHb,IAiHyBrF,EAAiB,MAEvC,QAAViF,EAAEC,OACJpB,GAAaA,GAED,QAAVmB,EAAEC,KAAgB,CACpB/E,GAAgBA,EAChB,IAAIoF,EAAM7E,SAAS8E,eAAe,YAEhCD,EAAIE,MAAMC,QADRvF,EACkB,OAEA,WAK1B,IAAIwF,EAAW,EACXC,EAAQ,EA0DZC,gCAzDSC,EAAOC,GAGd,GAFAnB,EAASoB,kBAhD0BC,GACnC,MAAMnF,EAASmF,EAASlB,WAClBmB,EAAQpF,EAAOqF,YACfC,EAAStF,EAAOuF,aAChBC,EAAaxF,EAAOoF,QAAUA,GAASpF,EAAOsF,SAAWA,EAI/D,OAHIE,GACFL,EAASjF,QAAQkF,EAAOE,GAAQ,GAE3BE,EA0CHC,CAA4B3F,GAAW,CACzC,MAAME,EAASF,EAASmE,WACxBP,EAAOgC,OAAS1F,EAAOqF,YAAcrF,EAAOuF,aAC5C7B,EAAOiC,yBAGT,IAAIC,EAASX,EAAOJ,EACpBA,EAAWI,EAEXH,GAASA,EADG,IACKc,GAAkB,IACnC,IAAIC,EAAKf,EAAQ7C,KAAKC,GAAM,IAE5B/C,EAnJc,KAmJPD,EAA6B+C,KAAK6D,IAAID,GAC7CzG,EApJc,KAoJPF,EAA6B+C,KAAK8D,IAAIF,GAE7CjD,EAAOT,SAASH,EAAI7C,EACpByD,EAAOT,SAASyB,EAAIxE,EAEpBoD,EAAML,SAASH,EAAI7C,EACnBqD,EAAML,SAASyB,EAAIxE,EAEnBgE,EAAUjB,SAASH,EAAI7C,EACvBiE,EAAUjB,SAASyB,EAAIxE,EAEvBkE,EAAOnB,SAASH,EAAI7C,EACpBmE,EAAOnB,SAASyB,EAAIxE,EAEpB,IAAI4G,EAAI/D,KAAKgE,IAAI9G,EAAM,GAAK8C,KAAKgE,IAhKjB,SAFF,KAkKgD,GAAKhE,KAAKgE,IAAI7G,EAAOsC,EAAoB,GACnGwE,EAAkE,IAAtDjE,KAAKkE,KAjKL,SAFF,KAmKwClE,KAAKmE,KAAKJ,IAAa/D,KAAKC,GAIlF,GAFAtC,SAAS8E,eAAe,SAAS2B,UAAYH,EAASI,QAAQ,GAE1DtD,EAAW,CACb,MAAMuD,EAAS,GACfA,EAAOC,KAAK,IAAIjH,EAAAkH,QAActH,EAvKhB,SAFF,KAyKiDC,IAC7DmH,EAAOC,KAAK,IAAIjH,EAAAkH,QAActH,EAAM,EAAGC,IACvCmH,EAAOC,KAAK,IAAIjH,EAAAkH,QAAc,IAAiB,EAAG/E,IAClD,MAAMgF,GAAe,IAAInH,EAAAoH,gBAAuBC,cAAcL,GAClD,MAARtD,IACF3D,EAAMuH,OAAO5D,GACbA,EAAO,MAETA,EAAO,IAAI1D,EAAAuH,SAAeJ,EAAcxD,GACxC5D,EAAM8B,IAAI6B,QAEE,MAARA,IACF3D,EAAMuH,OAAO5D,GACbA,EAAO,MAIXnD,EAASiH,OAAOzH,EAAOoE,GACvBqB,sBAAsBC","sources":["src/sunset.js"],"sourcesContent":["import * as THREE from 'three';\nimport { MapControls, OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nlet kilometer = 1 / 10000;\nlet radius = 20e3; // = 12427.424 miles\nlet sunDistance = 4828.032; // = 3000 miles\nlet rotationRadius = 10e3;\nlet sunX = 0;\nlet sunZ = 0;\nlet showControls = true;\n\nconst scene = new THREE.Scene();\n\n// const axesHelper = new THREE.AxesHelper(10);\n// scene.add(axesHelper);\n\nconst loader = new THREE.TextureLoader();\n\nconst canvas = document.querySelector('#canvas');\nlet renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n  antialias: true,\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);\nrenderer.autoClear = false;\nrenderer.setClearColor(0x000000, 0);\n\nconst starGeometry = new THREE.SphereGeometry(80, 64, 64);\nconst starMaterial = new THREE.MeshBasicMaterial({\n  map: loader.load('textures/TychoSkymapII.t3_04096x02048.jpg'),\n  side: THREE.BackSide,\n});\nconst starMesh = new THREE.Mesh(starGeometry, starMaterial);\nscene.add(starMesh);\n\nlet ambient = 0.1;\nconst ambientlight = new THREE.AmbientLight(0xffffff, ambient);\nscene.add(ambientlight);\n\nlet ch = 1e5 * kilometer;\nlet cr = radius * kilometer;\nconst geometry = new THREE.ConeGeometry(cr, ch, 64);\nconst materials = [\n  new THREE.MeshBasicMaterial({ map: loader.load('textures/cone2.png') }), //\n  new THREE.MeshBasicMaterial({ color: 0x000000 }),\n  new THREE.MeshPhongMaterial({ map: loader.load('textures/Azimuthal_equidistant_projection_SW.png') }),\n];\nconst cone = new THREE.Mesh(geometry, materials);\ncone.rotation.x = Math.PI;\ncone.position.y = ch / -2;\nscene.add(cone);\n\nconst dunceGeometry = new THREE.ConeGeometry(260 * kilometer, 600 * kilometer, 64, 1, true);\nconst dunceMaterial = new THREE.MeshBasicMaterial({ map: loader.load('textures/dunce.png') });\nconst dunce = new THREE.Mesh(dunceGeometry, dunceMaterial);\ndunce.position.y = (sunDistance + 320) * kilometer;\ndunce.rotation.y = Math.PI;\nscene.add(dunce);\n\nconst spriteMap = new THREE.TextureLoader().load('textures/sun.png');\nconst spriteMaterial = new THREE.SpriteMaterial({ map: spriteMap });\nconst sprite = new THREE.Sprite(spriteMaterial);\nsprite.position.y = sunDistance * kilometer;\nlet sc = 10 * 51.499 * kilometer; // 10 x 32 miles, to make it visible\nsprite.scale.set(sc, sc, sc);\nscene.add(sprite);\n\nlet showlines = false;\nlet line = null;\nconst linematerial = new THREE.LineBasicMaterial({ color: 0x0000ff });\n\nconst spotLight = new THREE.SpotLight(0xffffff, 2, 0, 0.5, 1);\nconst target = new THREE.Object3D();\nspotLight.position.set(0, sprite.position.y, 0);\nspotLight.castShadow = true;\nscene.add(target);\nspotLight.target = target;\nscene.add(spotLight);\n\nconst camera = new THREE.PerspectiveCamera(50, 2, kilometer, 1000);\ncamera.position.z = radius * kilometer;\ncamera.position.y = 1000 * kilometer;\ncamera.lookAt(0, (sunDistance * kilometer) / 2, 0);\nscene.add(camera);\n\nconst controls = new OrbitControls(camera, renderer.domElement);\n\nfunction resizeRendererToDisplaySize(renderer) {\n  const canvas = renderer.domElement;\n  const width = canvas.clientWidth;\n  const height = canvas.clientHeight;\n  const needResize = canvas.width !== width || canvas.height !== height;\n  if (needResize) {\n    renderer.setSize(width, height, false);\n  }\n  return needResize;\n}\n\ndocument.addEventListener('keydown', function (e) {\n  if (e.code == 'KeyA') {\n    ambient = Math.max(0, ambient - 0.01);\n    ambientlight.intensity = ambient;\n  }\n  if (e.code == 'KeyD') {\n    ambient = Math.min(1, ambient + 0.01);\n    ambientlight.intensity = ambient;\n  }\n  if (e.code == 'Space') {\n    camera.position.set(0, 1000 * kilometer, radius * kilometer);\n    camera.lookAt(0, (sunDistance * kilometer) / 2, 0);\n    controls.reset();\n  }\n  if (e.code == 'KeyW') {\n    rotationRadius = Math.max(100, rotationRadius - 100);\n  }\n  if (e.code == 'KeyS') {\n    rotationRadius = Math.min(radius, rotationRadius + 100);\n  }\n  if (e.code == 'KeyL') {\n    showlines = !showlines;\n  }\n  if (e.code == 'KeyC') {\n    showControls = !showControls;\n    var obj = document.getElementById('overview');\n    if (showControls) {\n      obj.style.display = 'flex';\n    } else {\n      obj.style.display = 'none';\n    }\n  }\n});\n\nlet lastTime = 0;\nlet angle = 0;\nfunction render(time) {\n  controls.update();\n\n  if (resizeRendererToDisplaySize(renderer)) {\n    const canvas = renderer.domElement;\n    camera.aspect = canvas.clientWidth / canvas.clientHeight;\n    camera.updateProjectionMatrix();\n  }\n\n  let deltaT = time - lastTime;\n  lastTime = time;\n  let speed = 1 / 100;\n  angle = (angle + deltaT * speed) % 360;\n  let a = (angle * Math.PI) / 180;\n\n  sunX = rotationRadius * kilometer * Math.cos(a);\n  sunZ = rotationRadius * kilometer * Math.sin(a);\n\n  sprite.position.x = sunX;\n  sprite.position.z = sunZ;\n\n  dunce.position.x = sunX;\n  dunce.position.z = sunZ;\n\n  spotLight.position.x = sunX;\n  spotLight.position.z = sunZ;\n\n  target.position.x = sunX;\n  target.position.z = sunZ;\n\n  let q = Math.pow(sunX, 2) + Math.pow(sunDistance * kilometer, 2) + Math.pow(sunZ - radius * kilometer, 2);\n  let sunAngle = (Math.asin((sunDistance * kilometer) / Math.sqrt(q)) * 180) / Math.PI;\n\n  document.getElementById('angle').innerText = sunAngle.toFixed(3);\n\n  if (showlines) {\n    const points = [];\n    points.push(new THREE.Vector3(sunX, sunDistance * kilometer, sunZ));\n    points.push(new THREE.Vector3(sunX, 0, sunZ));\n    points.push(new THREE.Vector3(100 * kilometer, 0, radius * kilometer));\n    const linegeometry = new THREE.BufferGeometry().setFromPoints(points);\n    if (line != null) {\n      scene.remove(line);\n      line = null;\n    }\n    line = new THREE.LineLoop(linegeometry, linematerial);\n    scene.add(line);\n  } else {\n    if (line != null) {\n      scene.remove(line);\n      line = null;\n    }\n  }\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(render);\n}\nrequestAnimationFrame(render);\n"],"names":["$6a95aa2dd85669f6$var$rotationRadius","$6a95aa2dd85669f6$var$sunX","$6a95aa2dd85669f6$var$sunZ","$6a95aa2dd85669f6$var$showControls","$6a95aa2dd85669f6$var$scene","$hGT0Q","Scene","$6a95aa2dd85669f6$var$loader","TextureLoader","$6a95aa2dd85669f6$var$canvas","document","querySelector","$6a95aa2dd85669f6$var$renderer","WebGLRenderer","canvas","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","autoClear","setClearColor","$6a95aa2dd85669f6$var$starGeometry","SphereGeometry","$6a95aa2dd85669f6$var$starMaterial","MeshBasicMaterial","map","load","side","BackSide","$6a95aa2dd85669f6$var$starMesh","Mesh","add","$6a95aa2dd85669f6$var$ambient","$6a95aa2dd85669f6$var$ambientlight","AmbientLight","$6a95aa2dd85669f6$var$geometry","ConeGeometry","$6a95aa2dd85669f6$var$radius","$6a95aa2dd85669f6$var$materials","color","MeshPhongMaterial","$6a95aa2dd85669f6$var$cone","rotation","x","Math","PI","position","y","$6a95aa2dd85669f6$var$ch","$6a95aa2dd85669f6$var$dunceGeometry","$6a95aa2dd85669f6$var$dunceMaterial","$6a95aa2dd85669f6$var$dunce","$6a95aa2dd85669f6$var$spriteMap","$6a95aa2dd85669f6$var$spriteMaterial","SpriteMaterial","$6a95aa2dd85669f6$var$sprite","Sprite","scale","set","$6a95aa2dd85669f6$var$showlines","$6a95aa2dd85669f6$var$line","$6a95aa2dd85669f6$var$linematerial","LineBasicMaterial","$6a95aa2dd85669f6$var$spotLight","SpotLight","$6a95aa2dd85669f6$var$target","Object3D","castShadow","target","$6a95aa2dd85669f6$var$camera","PerspectiveCamera","z","lookAt","$6a95aa2dd85669f6$var$controls","$W2bOH","OrbitControls","domElement","addEventListener","e","code","max","intensity","min","reset","obj","getElementById","style","display","$6a95aa2dd85669f6$var$lastTime","$6a95aa2dd85669f6$var$angle","requestAnimationFrame","$6a95aa2dd85669f6$var$render","time","update","renderer","width","clientWidth","height","clientHeight","needResize","$6a95aa2dd85669f6$var$resizeRendererToDisplaySize","aspect","updateProjectionMatrix","deltaT","a","cos","sin","q","pow","sunAngle","asin","sqrt","innerText","toFixed","points","push","Vector3","linegeometry","BufferGeometry","setFromPoints","remove","LineLoop","render"],"version":3,"file":"sunset.ee95642d.js.map"}